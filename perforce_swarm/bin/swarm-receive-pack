#!/usr/bin/env ruby

require_relative '../init'
require 'timeout'

# we'll listen on a unix socket for the commands "LOCK\n" or "UNLOCK\n" from the pre-receive/post-receive hooks
# if invoked, we'll send back "LOCKED\n" post acquisition or "UNLOCKED\n" post release
# we only do this if we were passed the path to a valid repo with mirroring enabled
repo_path  = ARGV.length > 0 && File.realpath(ARGV.last) rescue false
mirror_url = repo_path && PerforceSwarm::Mirror.mirror_url(repo_path)

if repo_path && mirror_url
  push_lock = nil # keeping the handle scoped outside the thread is important!
  lock_socket = "#{repo_path}/mirror_push-#{Process.pid}.socket"
  ENV['WRITE_LOCK_SOCKET'] = lock_socket
  File.unlink(lock_socket) if File.exist?(lock_socket)
  thread = Thread.new do
    Socket.unix_server_loop(lock_socket) do |socket|
      begin
        # just encase an evil do-er connects; only wait 5 seconds for a command don't block forever
        command = nil
        Timeout.timeout 5 do
          command = socket.gets.strip
        end

        case command
        when 'LOCK'
          PerforceSwarm::Mirror.write_lock(repo_path)
          # Grab the open lock and hold it in the parent process
          push_lock = PerforceSwarm::Mirror.push_locks[File.realpath("#{repo_path}/mirror_push.lock")]
        when 'UNLOCK'
          PerforceSwarm::Mirror.write_unlock(repo_path)
        else
          # ignore unknown commands
          socket.puts 'UNKNOWN'
          next
        end

        socket.puts "#{command}ED"
      rescue Timeout::Error
        socket.puts 'TIMEOUT'
        next
      ensure
        socket.flush
        socket.close
      end
    end
  end
  thread.abort_on_exception = true
else
  # Set the lock socket so the mirroring code knows we are intentionally
  # going to call it during recieve-pack, but without a mirror.
  ENV['WRITE_LOCK_SOCKET'] = PerforceSawrm::Mirror.NOT_MIRRORED
end

# run the normal git-receive-pack giving it access to the lock socket
begin
  # if the caller specified a git-path use is. otherwise we rely on
  # the path environment routing 'git' to the correct instance
  git_path = 'git'
  if ARGV.first[/^--git-path=/]
    git_path = ARGV.shift[/^--git-path=(.*)/, 1]
  end

  Process.wait spawn(ENV, git_path, 'receive-pack', *ARGV)
  exit_status = $?.exitstatus
ensure
  # ensure the thread is shutdown and cleanup our socket
  if repo_path && mirror_url
    thread.kill
    File.unlink(lock_socket) if File.exist?(lock_socket)
  end

  # note exit status can be nil; we want to default to a failing code in that case
  exit exit_status || 1
end
