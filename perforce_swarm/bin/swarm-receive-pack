#!/usr/bin/env ruby

require_relative '../mirror_lock_socket'

# we'll listen on a unix socket for the commands "LOCK\n" or "UNLOCK\n" from the pre-receive/post-receive hooks
# if invoked, we'll send back "LOCKED\n" post acquisition or "UNLOCKED\n" post release
# we only do this if we were passed the path to a valid repo with mirroring enabled
repo_path = ARGV.length > 0 && File.realpath(ARGV.last) rescue false
socket_server = PerforceSwarm::MirrorLockSocketServer.new(repo_path)
socket_server.start

# run the normal git-receive-pack giving it access to the lock socket
begin
  # if the caller specified a git-path use is. otherwise we rely on
  # the path environment routing 'git' to the correct instance
  git_path = 'git'
  if ARGV.first[/^--git-path=/]
    git_path = ARGV.shift[/^--git-path=(.*)/, 1]
  end

  Process.wait spawn(ENV, git_path, 'receive-pack', *ARGV)
  exit_status = $?.exitstatus
ensure
  # ensure the thread is shutdown and cleanup our socket
  socket_server.stop

  # note exit status can be nil; we want to default to a failing code in that case
  exit exit_status || 1
end
